free(0..3, 0..7).

free(4, 0..1). enemy(4,2). computer(1,4,3). enemy(4,4). free(4, 5..7).
free(5, 0..7).
free(6, 0..7). 
free(7,0..7).


% Facts generated by software:
% 	enemy(I,J).
% 	computer(P,I,J).
% 	free(I,J).

% Guess
%move(P, I, J) | notMove(P, I, J) :- canMove(P, I, J).

% Can move in one of four possible directions
%canMove(P, I, J) :- canMoveUp(P, I, J).
%canMove(P, I, J) :- canMoveDown(P, I, J).
%canMove(P, I, J) :- canMoveRight(P, I, J).
%canMove(P, I, J) :- canMoveLeft(P, I, J).

canMoveUp(P, I, J) :- computer(P, I1, J), free(I,J), I1>I.
canMoveDown(P, I, J) :- computer(P, I1 , J), free(I,J), I1<I. 
canMoveRight(P, I, J) :- computer(P, I , J1), free(I,J), J1<J. 
canMoveLeft(P, I, J) :- computer(P, I , J1), free(I,J), J1>J.

:- canMoveUp(P, I_FINALE, J), computer(P, I_INIZIALE, J), enemy(I, J), I>I_FINALE, I<I_INIZIALE.
:- canMoveUp(P, I_FINALE, J), computer(P, I_INIZIALE, J), computer(P1, I, J), I>I_FINALE, I<I_INIZIALE.

:- canMoveDown(P, I_FINALE, J), computer(P, I_INIZIALE, J), enemy(I, J), I<I_FINALE, I>I_INIZIALE.
:- canMoveDown(P, I_FINALE, J), computer(P, I_INIZIALE, J), computer(P1, I, J), I<I_FINALE, I>I_INIZIALE.

:- canMoveRight(P, I, J_FINALE), computer(P, I, J_INIZIALE), enemy(I, J), J<J_FINALE, J>J_INIZIALE.
:- canMoveRight(P, I, J_FINALE), computer(P, I, J_INIZIALE), computer(P1, I, J), J<J_FINALE, J>J_INIZIALE.

:- canMoveLeft(P, I, J_FINALE), computer(P, I, J_INIZIALE), enemy(I, J), J>J_FINALE, J<J_INIZIALE.
:- canMoveLeft(P, I, J_FINALE), computer(P, I, J_INIZIALE), computer(P1, I, J), J>J_FINALE, J<J_INIZIALE.